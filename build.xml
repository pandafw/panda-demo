<?xml version="1.0" encoding="UTF-8"?>
<project name="panda-demo" default="usage" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- load properties -->
	<property file="src/main/java/system.properties"/>

	<property name="gen.verbose" value="5"/>
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>

	<!-- get revision -->
	<script language="javascript">
		var ver = project.getProperty("VERSION");
		if (ver == null) {
			function run(cmd) {
				var is = null;
				try {
					var p = java.lang.Runtime.getRuntime().exec(cmd);
					is = p.getInputStream();
					var br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
					var o = "";
					var s;
					while ((s = br.readLine()) != null) {
						o += s.trim();
					}
					return o;
				}
				catch (e) {
					java.lang.System.err.println(e);
					return "";
				}
				finally {
					if (is != null) {
						is.close();
					}
				}
			}
			
			var rev = "0";
			if (new java.io.File(".git").exists()) {
				var s = run("git rev-list --all --count");
				if (s != "") {
					rev = s;
				}
			}
			else if (new java.io.File(".svn").exists()) {
				var si = run("svn info . --xml");
				if (si != "") {
					var b = si.indexOf("revision=\"") + 10;
					var e = si.indexOf("\"", b);
					rev = si.substring(b, e);
				}
			}
			project.setProperty("REVISION", rev);
			project.setProperty("VERSION", project.getProperty("prj.version") + "." + rev);
		}
	</script>

	
	<path id="main.cp">
		<pathelement path="out/classes"/>
		<pathelement path="../panda-aems/out/classes"/>
		<pathelement path="../panda-exts/out/classes"/>
		<pathelement path="../panda-java/out/classes"/>
		<fileset dir="lib/api">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/run">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="lib.cp">
		<pathelement path="../panda-aems/out/classes"/>
		<pathelement path="../panda-exts/out/classes"/>
		<pathelement path="../panda-java/out/classes"/>
		<fileset dir="lib/api">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/run">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/jdbc">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib/test">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="tool.cp">
		<pathelement path="out/classes"/>
		<pathelement path="out/test-classes"/>
		<pathelement path="../panda-tool/out/classes"/>
		<path refid="lib.cp"/>
	</path>

	<path id="test.cp">
		<pathelement path="out/classes"/>
		<pathelement path="out/test-classes"/>
		<path refid="lib.cp"/>
	</path>

	<path id="junit.cp">
		<pathelement path="out/emma-classes"/>
		<pathelement path="out/test-classes"/>
		<path refid="lib.cp"/>
	</path>

	<path id="emma.cp">
		<pathelement location="lib/test/emma.jar"/>
		<pathelement location="lib/test/emma_ant.jar"/>
	</path>

	<!-- usage -->
	<target name="usage">
		<echo><![CDATA[
${prj.name}-${VERSION} build file
-----------------------------------

Available targets are:

all          --> dist & test
build        --> Build the project (clean, cp-res, javac)
clean        --> Delete everything in the output directory
cp-res       --> Copy resource files to the classes directory
dist         --> Distribute project as a jar file (build, jar)
gen-all      --> Generate all source files (gen-clean, gen-java, gen-ftl, gen-res)"/>
gen-clean    --> Delete all generated files"/>
gen-ftl      --> Generate freemarker source files"/>
gen-java     --> Generate java source files"/>
gen-res      --> Generate resource bundle source files"/>
ivy-resolve  --> Retreive dependencies
ivy-report   --> Generates a report of dependencies
ivy-clean    --> Clean the cache
jar          --> Make the project as a jar file
javac        --> Compile java source files
javadoc      --> Generate java documents
test         --> Test the project (test-build, test-run, test-report)
test-build   --> Build the test suite of project (test-clean, test-rescp, test-emma, test-javac)
test-clean   --> Delete test output files in the output directory
test-emma    --> EMMA instruments main classes
test-javac   --> Compile test java source files
test-javadoc --> Generate test java documents
test-report  --> Build the test report
test-rescp   --> Copy test resource to the test classes directory
test-run     --> Run all junit test case
pom          --> Generate pom.xml
mvn-deploy   --> Deploy snapshot version to maven snapshot repository
mvn-stage    --> Deploy release version to maven staging repository
panda-deploy --> Deploy release version to panda-repo repository
]]>
		</echo>
	</target>

	<!-- ivy -->
	<target name="ivy-resolve" description="ivy --> retreive dependencies">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="lib/api"/>
			<fileset dir="lib/run"/>
			<fileset dir="lib/gae"/>
			<fileset dir="lib/jdbc"/>
			<fileset dir="lib/test"/>
		</delete>
		<ivy:retrieve conf="api,run,gae,jdbc,test" pattern="lib/[conf]/[artifact](-[classifier]).[ext]"/>
	</target>

	<target name="ivy-report" depends="ivy-resolve" description="ivy --> generates a report of dependencies">
		<ivy:report todir="lib/ivy" conf="api,run,gae,jdbc,test"/>
	</target>

	<target name="ivy-clean" description="ivy --> clean the cache">
		<ivy:cleancache />
	</target>
	
	<!-- code generate -->
	<target name="gen-clean" description="Delete all generated files">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="src/gen/java" includes="**/*"/>
			<fileset dir="src/gen/resources" includes="**/*"/>
			<fileset dir="src/gen/templates" includes="**/*"/>
		</delete>
	</target>

	<target name="gen-java" description="Generate java source files">
		<delete includeEmptyDirs="true">
			<fileset dir="src/gen/java" includes="**/*.java"/>
			<fileset dir="src/gen/resources" includes="**/*.xml"/>
		</delete>

		<taskdef name="genent" classname="panda.tool.codegen.EntityGenerator" classpathref="tool.cp"/>
		<genent dir="src/gen/conf" includes="*.xml" out="src/gen/java" verbose="${gen.verbose}"/>

		<taskdef name="genact" classname="panda.tool.codegen.ActionGenerator" classpathref="tool.cp"/>
		<genact dir="src/gen/conf" includes="*.xml" out="src/gen/java" verbose="${gen.verbose}"/>

		<move todir="src/gen/resources" preservelastmodified="true">
			<fileset dir="src/gen/java">
				<include name="**/*.xml"/>
			</fileset>
		</move>
	</target>

	<target name="gen-ftl" description="Generate freemarker source files">
		<delete includeEmptyDirs="true">
			<fileset dir="src/gen/templates" includes="**/*"/>
		</delete>

		<taskdef name="genftl" classname="panda.tool.codegen.FreemarkerGenerator" classpathref="tool.cp"/>
		<genftl dir="src/gen/conf" includes="*.xml" out="src/gen/templates" verbose="${gen.verbose}"/>
	</target>

	<target name="gen-res" description="Generate resource bundle source files">
		<delete includeEmptyDirs="true">
			<fileset dir="src/gen/resources" includes="**/*.properties"/>
		</delete>

		<taskdef name="genpro" classname="panda.tool.codegen.PropertyGenerator" classpathref="tool.cp"/>
		<genpro dir="src/gen/conf" includes="*.xml" out="src/gen/resources" verbose="${gen.verbose}"/>
	</target>

	<target name="gen-all" depends="gen-clean, gen-java, gen-ftl, gen-res" description="Generate all source files (gen-clean, gen-java, gen-ftl, gen-res)"/>

	<!-- build -->
	<target name="clean" description="Delete everything in the output directory">
		<delete dir="out"/>
	</target>

	<target name="cp-res" description="Copy resource files to the classes directory">
		<mkdir dir="out/classes"/>
		<delete>
			<fileset dir="out/classes">
				<exclude name="**/*.class"/>
			</fileset>
		</delete>
		<copy todir="out/classes" preservelastmodified="true">
			<fileset dir="src/main/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/main/resources">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/main/templates">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/gen/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/gen/resources">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/gen/templates">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="javac" description="Compile java source files">
		<mkdir dir="out/classes"/>
		<touch>
			<fileset dir="src/main/java" includes="**/package-info.java"/>
			<fileset dir="src/gen/java" includes="**/package-info.java"/>
		</touch>
		<javac destdir="out/classes" encoding="UTF-8" source="1.6" target="1.6" debug="true" includeAntRuntime="false">
			<src path="src/main/java"/>
			<src path="src/gen/java"/>
			<classpath refid="main.cp"/>
		</javac>
	</target>

	<target name="build" depends="clean, ivy-report, cp-res, javac" description="Build the project"/>

	<!-- dist -->
	<target name="javadoc" description="Generate java documents">
		<delete dir="out/javadoc"/>
		<javadoc 
			destdir="out/javadoc"
			encoding="UTF-8" docencoding="UTF-8" charset="UTF-8" locale="en_US"
			use="true" splitindex="true"
			windowTitle="${prj.title} ${prj.version} API"
			doctitle="${prj.title} ${prj.version} API"
			footer="&lt;a href=&quot;${prj.url}&quot;&gt;${prj.url}&lt;/a&gt;"
		>
			<fileset dir="src/main/java"/>
			<fileset dir="src/gen/java"/>
			<classpath refid="main.cp"/>
		</javadoc>
	</target>

	<target name="jar" description="Make project as a jar file">
		<delete>
			<fileset dir="out" includes="*.jar"/>
		</delete>
		<copy file="LICENSE" todir="out/classes/META-INF" overwrite="true" force="true"/>
		<jar destfile="out/${prj.name}-${VERSION}.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/> 
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="out/classes"/>
		</jar>
		<jar destfile="out/${prj.name}-${VERSION}-sources.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/> 
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="src/main/java"/>
			<fileset dir="src/main/resources"/>
			<fileset dir="src/main/templates"/>
			<fileset dir="src/gen/java"/>
			<fileset dir="src/gen/resources"/>
			<fileset dir="src/gen/templates"/>
			<fileset dir="out/classes" includes="META-INF/LICENSE"/>
		</jar>
		<jar destfile="out/${prj.name}-${VERSION}-javadoc.jar">
			<manifest>
				<attribute name="Created-By" value="${prj.org}"/>
				<attribute name="Built-By" value="${prj.org}"/>
				<attribute name="Built-Date" value="${TODAY}"/>
				<attribute name="Implementation-Title" value="${prj.title}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/>
				<attribute name="Implementation-Vendor" value="${prj.url}"/>
			</manifest>
			<fileset dir="out/javadoc"/>
		</jar>
	</target>

	<target name="dist" depends="build, javadoc, jar" description="Distribute project as a jar file"/>

	<!-- test -->
	<target name="test-clean" description="Delete test output files in the output directory">
		<delete dir="out/test-classes"/>
		<delete dir="out/test-javadoc"/>
		<delete dir="out/test-report"/>
		<delete dir="out/emma-classes"/>
		<delete dir="out/emma-report"/>
	</target>

	<target name="test-rescp" description="Copy resource to the classes directory">
		<mkdir dir="out/test-classes"/>
		<delete>
			<fileset dir="out/test-classes">
				<exclude name="**/*.class"/>
			</fileset>
		</delete>
		<copy todir="out/test-classes" preservelastmodified="true">
			<fileset dir="src/test/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/test/resources">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="test-emma" description="EMMA instruments classes">
		<taskdef resource="emma_ant.properties" classpathref="emma.cp"/>
		
		<!-- EMMA instr class output directory (it is important to create this property only when EMMA is enabled) -->
		<mkdir dir="out/emma-classes"/>

		<copy todir="out/emma-classes" preservelastmodified="true">
			<fileset dir="out/classes"/>
		</copy>

		<!-- Instrument the classes, this takes the normal classes, and makes instrumented classes instead -->
		<!-- Note that EMMA takes regular ANT path elements as instrumentation input, which is exceedingly convenient -->
		<emma>
			<instr instrpath="out/emma-classes"
				 metadatafile="out/emma-report/metadata.emma"
				 merge="true"
				 mode="overwrite"
			/>
		</emma>
	</target>

	<target name="test-javac" description="Compile test source java files">
		<mkdir dir="out/test-classes"/>
		<javac destdir="out/test-classes" encoding="UTF-8" source="1.6" target="1.6" debug="true" includeAntRuntime="false">
			<src path="src/test/java"/>
			<classpath refid="test.cp"/>
		</javac>
	</target>

	<target name="test-build"
		depends="test-clean, test-rescp, test-emma, test-javac"
		description="Build the test suite of project"/>

	<target name="test-run" description="Run all junit test case">
		<mkdir dir="out/test-report"/>

		<junit printsummary="yes" haltonfailure="no" fork="true" forkmode="once">
			<jvmarg value="-Demma.coverage.out.file=out/emma-report/coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=false"/>
			<classpath refid="junit.cp"/>
			<batchtest fork="yes" todir="out/test-report">
				<formatter type="xml"/>
				<fileset dir="src/test/java">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test-report" description="Build the test report">
		<junitreport todir="out/test-report">
			<fileset dir="out/test-report">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="out/test-report"/>
		</junitreport>

		<emma>
			<report
				sort="+name,+class,+method,+block"
				metrics="method:70,block:80,line:80,class:100"
			>
				<sourcepath>
					<fileset dir="src/main/java"/>
					<fileset dir="src/gen/java"/>
				</sourcepath>

				<!-- collect all EMMA data dumps (metadata and runtime)
					 [this can be done via nested <fileset> fileset elements
					 or <file> elements pointing to a single file]:
				-->
				<fileset dir="out/emma-report" >
					<include name="*.emma"/>
				</fileset>

				<!-- for every type of report desired, configure a nested
					 element; various report parameters
					 can be inherited from the parent <report>
					 and individually overridden for each report type:
				-->
				<txt outfile="out/emma-report/coverage.txt"
					depth="package"
					columns="class,method,block,line,name"
				/>
				<xml outfile="out/emma-report/coverage.xml"
					depth="package"
				/>
				<html outfile="out/emma-report/coverage.html"
					depth="method"
					columns="name,class,method,block,line"
				/>
			</report>
		</emma>
	</target>

	<target name="test-javadoc" description="Generate test java documents">
		<delete dir="out/test-javadoc"/>
		<javadoc
			sourcepath="src/test/java" destdir="out/test-javadoc"
			encoding="UTF-8" docencoding="UTF-8" charset="UTF-8" locale="en_US"
			use="true" splitindex="true"
			windowTitle="${prj.title} ${VERSION} Test API"
			doctitle="${prj.title} ${VERSION} Test API"
			footer="&lt;a href=&quot;http://${prj.url}&quot;&gt;${prj.url}&lt;/a&gt;"
		>
			<classpath refid="test.cp"/>
		</javadoc>
	</target>

	<target name="test"
		depends="test-build, test-run, test-report"
		description="Test the project (test-build, test-run, test-report)"/>

	<!-- all -->
	<target name="all" depends="dist, test"/>
</project>
