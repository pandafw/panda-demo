<?xml version="1.0" encoding="UTF-8"?>
<project name="panda-demo-gae" default="usage" basedir=".">
	<property name="prj.repo" location="../../panda-repo"/>

	<!-- load properties -->
	<property file="../src/main/resources/system.properties"/>

	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>

	<!-- get prj.version -->
	<loadfile srcFile="../../panda-java/src/main/java/panda/Panda.java" property="prj.version" encoding="UTF-8">
		<filterchain>
			<striplinebreaks/>
			<linecontains>
				<contains value="VERSION"/>
			</linecontains>
			<tokenfilter>
				<replaceregex pattern="(.*)&quot;(.*)&quot;.*" replace="\2"/>
			</tokenfilter>
		</filterchain>
	</loadfile>

	<!-- get revision -->
	<script language="javascript">
		var ver = project.getProperty("VERSION");
		if (ver == null) {
			function run(cmd) {
				var is = null;
				try {
					var p = java.lang.Runtime.getRuntime().exec(cmd);
					is = p.getInputStream();
					var br = new java.io.BufferedReader(new java.io.InputStreamReader(is));
					var o = "";
					var s;
					while ((s = br.readLine()) != null) {
						o += s.trim();
					}
					return o;
				}
				catch (e) {
					java.lang.System.err.println(e);
					return "";
				}
				finally {
					if (is != null) {
						is.close();
					}
				}
			}
			
			var rev = "0";
			if (new java.io.File("../.git").exists()) {
				var s = run("git rev-list --all --count");
				if (s != "") {
					rev = s;
				}
			}
			else if (new java.io.File("../.svn").exists()) {
				var si = run("svn info . --xml");
				if (si != "") {
					var b = si.indexOf("revision=\"") + 10;
					var e = si.indexOf("\"", b);
					rev = si.substring(b, e);
				}
			}
			var ver = project.getProperty("prj.version") + "." + rev;

			project.setProperty("REVISION", rev);
			project.setProperty("VERSION", ver);
			project.setProperty("GVERSION", ver.replace(/\./g, "-"));
		}
	</script>

	<path id="main.cp">
		<pathelement path="web/WEB-INF/classes"/>
		<fileset dir="web/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- usage -->
	<target name="usage">
		<echo><![CDATA[
${prj.name}-gae ${GVERSION} build file
-----------------------------------

Available targets are:

all          --> dist & test
build        --> Build the project (clean, cp-res, javac)
clean        --> Delete everything in the output directory
cp-res       --> Copy resource files to the classes directory
dist         --> Distribute project as a jar file (build, jar)
javac        --> Compile java source files
javadoc      --> Generate java documents
war          --> Build a war folder for deploy
]]>
		</echo>
	</target>

	<!-- prepare -->
	<target name="pp-web" description="Prepare panda-demo web resource files">
		<delete dir="web"/>
		<mkdir dir="web"/>
		<copy todir="web" preservelastmodified="true" includeEmptyDirs="false">
			<fileset dir="../out/war">
				<exclude name="**/*.#webclasspath"/>
				<exclude name="**/*.gitignore"/>
				<exclude name="WEB-INF/_*/**"/>
				<exclude name="WEB-INF/fonts/**"/>
			</fileset>
		</copy>
	</target>

	<target name="pp-static" description="Prepare static resource files">
		<delete dir="web/_static"/>
		<unjar dest="web/_static" src="${prj.repo}/com/foolite/panda-web/${prj.version}/panda-web-${prj.version}.jar"/>
	</target>

	<target name="pp-lib" description="Prepare panda java framework jar files">
		<delete>
			<fileset dir="web/WEB-INF/lib">
				<include name="freemarker.jar"/>
			</fileset>
		</delete>
		<copy todir="web/WEB-INF/lib" preservelastmodified="true">
			<fileset dir="../lib/gae">
				<include name="*.jar"/>
				<exclude name="*-sources.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="pp-jar" description="Prepare panda-demo classes file">
		<jar destfile="web/WEB-INF/lib/${prj.name}-${VERSION}.jar">
			<fileset dir="web/WEB-INF/classes"/>
		</jar>
		<delete dir="web/WEB-INF/classes"/>
	</target>

	<target name="prepare" depends="pp-web, pp-static, pp-lib, pp-jar" description="Prepare the project"/>

	<!-- build -->
	<target name="clean" description="Delete everything in the output directory">
		<delete dir="web/WEB-INF/classes"/>
	</target>

	<target name="cp-res" description="Copy resource files to the classes directory">
		<mkdir dir="web/WEB-INF/classes"/>
		<delete>
			<fileset dir="web/WEB-INF/classes">
				<exclude name="**/*.class"/>
			</fileset>
		</delete>
		<copy todir="web/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="src/main/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="src/main/resources">
				<include name="**/*"/>
			</fileset>
			<fileset dir="src/main/templates">
				<include name="**/*"/>
			</fileset>
			<fileset dir="../out/classes">
				<include name="log4j.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="javac" description="Compile java source files">
		<mkdir dir="web/WEB-INF/classes"/>
		<touch>
			<fileset dir="src/main/java" includes="**/package-info.java"/>
		</touch>
		<javac destdir="web/WEB-INF/classes" encoding="UTF-8" source="1.7" target="1.7" debug="true" includeAntRuntime="false">
			<src path="src/main/java"/>
			<classpath refid="main.cp"/>
		</javac>
	</target>

	<target name="build" depends="clean, cp-res, javac" description="Build the project"/>

	<!-- dist -->
	<target name="war" description="Build a war folder for deploy">
		<delete dir="war"/>
		<mkdir dir="war"/>
		<copy todir="war" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="web"/>
		</copy>
		<move file="war/WEB-INF/appengine-cron.xml" tofile="war/WEB-INF/cron.xml"/>

		<replaceregexp file="war/WEB-INF/classes/log4j.properties" 
			match="(debug)|(trace)"
			replace="info"
			byline="true"
			encoding="ISO-8859-1"/>
		<replaceregexp file="war/WEB-INF/classes/log4j.properties" 
			match="log4j.rootLogger=warn, stdout"
			replace="log4j.rootLogger=warn, java, smtp"
			byline="true"
			encoding="ISO-8859-1"/>
		<replaceregexp file="war/WEB-INF/appengine-web.xml" 
			match="&lt;!\-\- debug start --&gt;"
			replace="&lt;!-- debug start -"
			byline="true"/>
		<replaceregexp file="war/WEB-INF/appengine-web.xml" 
			match="&lt;!\-\- debug end --&gt;"
			replace="- debug end --&gt;"
			byline="true"/>
		<replaceregexp file="war/WEB-INF/appengine-web.xml" 
			match="&lt;!\-\- release start -"
			replace="&lt;!-- release start --&gt;"
			byline="true"/>
		<replaceregexp file="war/WEB-INF/appengine-web.xml" 
			match="- release end \-\-&gt;"
			replace="&lt;!-- release end --&gt;"
			byline="true"/>
		<replaceregexp file="war/WEB-INF/appengine-web.xml" 
			match="&lt;version&gt;&lt;/version&gt;"
			replace="&lt;version&gt;${GVERSION}&lt;/version&gt;"/>
		<replaceregexp file="war/WEB-INF/appengine-log.properties" 
			match="FINE"
			replace="INFO"
			byline="true"
			encoding="ISO-8859-1"/>

		<mkdir dir="war/META-INF"/>
		<manifest file="war/META-INF/MANIFEST.MF">
			<attribute name="Created-By" value="${prj.org}"/>
			<attribute name="Built-By" value="${prj.org}"/>
			<attribute name="Built-Date" value="${TODAY}"/>
			<attribute name="Implementation-Title" value="${prj.title}"/>
			<attribute name="Implementation-Version" value="${VERSION}"/>
			<attribute name="Implementation-Vendor" value="${prj.url}"/>
		</manifest>

		<copy file="../LICENSE" todir="war/META-INF" overwrite="true" force="true"/>
		<copy file="../ivy.xml" todir="war/META-INF" overwrite="true" force="true"/>
	</target>

	<target name="dist" depends="prepare, build, war" description="Build and distribute the project to a war folder"/>

	<!-- all -->
	<target name="all" depends="dist"/>
</project>
